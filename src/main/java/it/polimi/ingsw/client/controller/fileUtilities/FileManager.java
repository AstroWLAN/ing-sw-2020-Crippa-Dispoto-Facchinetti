package it.polimi.ingsw.client.controller.fileUtilities;

import it.polimi.ingsw.client.controller.fileUtilities.regex.Regex;
import it.polimi.ingsw.client.controller.fileUtilities.regex.UniqueLoggerRegex;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class FileManager {
    /**
     * List containing the messages generated by reading from file
     */
    private final List<String> fileReadingResults;
    private static final String clientSettingsPath = "clientSettings.txt";
    private final List<Regex> regexList;
    private static final int maxFileAdditionalLines = 10;
    //------------------------------------------    DEFAULT DATA
    /**
     * DEFAULT: uniqueLogger = false<br>
     * - if false the logger will not be unique but with a fixed name
     */
    private boolean uniqueLogger = false;

    /**
     *  Constructor of the FileManager,
     *  takes care of initializing the Regex that will be used for reading from files<br>
     *
     *  To developers: if you want to implement a new regex just create a new class insert it in the regex package and here in the constructor add it to the list
     */
    public FileManager() {
        this.fileReadingResults = new ArrayList<>();
        this.regexList = new ArrayList<>();
        this.regexList.add(new UniqueLoggerRegex());
    }

    /**
     *  Load the data contained in clientSettingsPath, based on the regex loaded in the FileManager constructor,
     *  the file containing the settings must be placed in the same folder as the server
     *
     *  If the file is not present or there is some reading error,
     *  FileManager will still contain the default values ​​that it should overwrite when reading from file
     */
    public void readClientSettings(){
        int regexUsedCounter = 0;
        Path clientSettings = Paths.get(getSystemPath().concat("/").concat(clientSettingsPath));

        if (!Files.exists(clientSettings)) {
            fileReadingResults.add("ClientSettings File does not exist - Using Default Settings");
        } else if (!Files.isRegularFile(clientSettings)) {
            fileReadingResults.add("File is not a ClientSettings, maybe a directory");
        } else if (!Files.isReadable(clientSettings)) {
            fileReadingResults.add("ClientSettings File is not readable");
        } else {
            // everything is right, process the clientSettings
            try {
                List<String> strings = Files.readAllLines(clientSettings);

                if( strings.size() >= (regexList.size()+maxFileAdditionalLines) ){
                    fileReadingResults.add("ClientSettings contains more than: "+maxFileAdditionalLines+" Additional Lines - Using Default Settings");
                }else {

                    for (String line : strings) {
                        if (null != line && regexFinder(line))
                            regexUsedCounter++;
                    }

                    if (regexUsedCounter == 0) {
                        fileReadingResults.add("ClientSettings does not contain valid settings - Using Default Settings");
                    }
                }

            } catch (IOException e) {
                fileReadingResults.add("ClientSettings File is not readable");
            }
        }
    }

    /**
     * Gets the root path where the jar is located
     * -EX:  C:\Users\ProgettoFinale-IDS\IdeaProjects
     * -JAR: C:\Users\ProgettoFinale-IDS\IdeaProjects\*.jar
     *
     * @return  String representing the path of the system on which the jar was run
     */
    private String getSystemPath(){
        File f = new File(System.getProperty("java.class.path"));
        File dir = f.getAbsoluteFile().getParentFile();
        return dir.toString();
    }

    /**
     * Search in the regex structure if the line passed is coded correctly, if it is,
     * load the data in the appropriate values ​​present in FileManager
     * @param line  String representing a line read from a file
     * @return  true if a regex has been executed, false if the line does not match any regex
     */
    private boolean regexFinder(String line){
        for(Regex regex : regexList){

            if(line.matches(regex.getRegexString())) {
                return regex.getData(line,this, fileReadingResults);
            }

        }
        return false;
    }

    //------------------------------------------    GETTERS & SETTERS
    //N.B:  SETTERS are for the exclusive use of Regex

    public void setUniqueLogger(boolean uniqueLogger) {
        this.uniqueLogger = uniqueLogger;
    }

    public boolean isUniqueLogger() {
        return uniqueLogger;
    }

    public List<String> getFileReadingResults() {
        return fileReadingResults;
    }
}
